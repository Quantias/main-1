from telethon import TelegramClient, events
import asyncio
import os
import random

from telethon.tl.functions.messages import SetTypingRequest
from telethon.tl.types import SendMessageTypingAction
from telethon.tl.functions.contacts import BlockRequest
from collections import defaultdict


api_id = 20363060
api_hash = '97b41b4af4696c29091e31326bc2bd50'

client = TelegramClient('user', api_id, api_hash)

SENT_USERS_FILE = 'sent_users.txt'
FAILED_USERS_FILE = 'failed_users.txt'
SPAM_LOG_FILE = 'spam_log.txt'
BLOCKED_USERS_FILE = 'blocked_users.txt'

SPAM_COUNTS = defaultdict(int)
WARNED_USERS = set()

def load_sent_users():
    users = set()
    if os.path.exists(SENT_USERS_FILE):
        with open(SENT_USERS_FILE, 'r') as f:
            lines = f.read().splitlines()
        cleaned_lines = []
        for line in lines:
            line = line.strip()
            if line.isdigit():
                users.add(int(line))
                cleaned_lines.append(line)
        with open(SENT_USERS_FILE, 'w') as f:
            f.write('\n'.join(cleaned_lines))
    return users

sent_users = load_sent_users()

@client.on(events.NewMessage(incoming=True))
async def handler(event):
    if not event.is_private:
        return

    sender = await event.get_sender()
    user_id = sender.id
    username = sender.username if sender.username else "None"

    SPAM_COUNTS[user_id] += 1

    if SPAM_COUNTS[user_id] == 15 and user_id not in WARNED_USERS:
        await event.respond("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å–ø–∞–º—å. –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –∏ —è —Ç–µ–±—è –∑–∞–±–ª–æ–∫–∏—Ä—É—é ü•∫")
        WARNED_USERS.add(user_id)
        with open(SPAM_LOG_FILE, 'a', encoding='utf-8') as f:
            f.write(f'‚ö†Ô∏è –í–∞—Ä–Ω –Ω–∞—Ö—É–π: {username} (ID: {user_id})\n')
        return

    if user_id in WARNED_USERS and SPAM_COUNTS[user_id] > 15:
        await event.respond("–¢—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ—à—å —Å–ø–∞–º–∏—Ç—å,–æ—Ç–¥–æ—Ö–Ω–∏ –≤ –±–∞–Ω–µ)")
        await client(BlockRequest(user_id))
        with open(BLOCKED_USERS_FILE, 'a', encoding='utf-8') as f:
            f.write(f'üö´ –í–±–∞–Ω–∞–Ω–µ–Ω: {username} (ID: {user_id})\n')
        return

    if user_id in sent_users:
        return

    try:
        sent_users.add(user_id)
        with open(SENT_USERS_FILE, 'a') as f:
            f.write(f'{user_id}\n')

        await client(SetTypingRequest(event.chat_id, SendMessageTypingAction()))
        await asyncio.sleep(random.uniform(2.5, 3.5))

        await client.send_message(
            event.chat_id,
            "–ü—Ä–∏–≤–µ—Ç, –µ—Å–ª–∏ —Ç—ã –∑–∞ –ø–æ–¥–∞—Ä–∫–æ–º ‚Äî —â–∞—Å —Å–∫–∏–Ω—É –∫–æ–µ-—á—Ç–æ! (–±—ã—Å—Ç—Ä–æ –≤—ã–ø–æ–ª–Ω–∏—à—å ‚Äî —Å—Ä–∞–∑—É –¥–∞–º –ø–æ–¥–∞—Ä–æ–∫) ‚ù§Ô∏è"
        )

        await asyncio.sleep(random.uniform(1.5, 2.5))

        await client.send_message(
            event.chat_id,
            (
                "**–ó–∞–¥–∞–Ω–∏–µ 1 üòä**\n\n"
                "–ó–∞–π–¥–∏ –≤ –±–æ—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏ –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –∏ –Ω–∞–∂–º–∏ –Ω–∞ \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å ‚úÖ\" ‚Üí "
                "[–∂–º—è–∫](https://t.me/treasury_official_bot/app?startapp=5094540706)\n\n"
                "–û—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã ‚ù§Ô∏è"
            ),
            parse_mode='md',
            link_preview=False
        )

        await asyncio.sleep(random.uniform(0.5, 1))

        await client.send_message(
            event.chat_id,
            (
                "**–ó–∞–¥–∞–Ω–∏–µ 2 üòä**\n\n"
                "–ó–∞–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ ‚Üí [—Ç—ã–∫](https://www.tiktok.com/discover/%D1%82%D0%B3-%D0%BF%D0%BE%D0%B4%D0%B0%D1%80%D0%BA%D0%B8)\n"
                "–∏ –ø–∏—à–∏ –ø–æ–¥ 15 –≤–∏–¥–µ–æ —Ç–µ–∫—Å—Ç üëá\n\n"
                "`@Crylinge –∫–æ–º—É –∑–≤—ë–∑–¥–æ—á–µ–∫?)`\n"
                "*üëÜ –ù–∞–∂–º–∏ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å*\n\n"
                "‚ùó –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –£–°–õ–û–í–ò–Ø:\n"
                "1. –õ–ê–ô–ö–ê–ô –°–í–û–ò –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò\n\n"
                "2. –ù–ê–ü–ò–®–ò 15 –¢–ï–ö–°–¢–û–í *(1 —Ç–µ–∫—Å—Ç –Ω–∞ 1 –≤–∏–¥–µ–æ)* –ò –û–¢–ü–†–ê–í–¨ –°–ö–†–ò–ù–´ –ö–ê–ñ–î–û–ì–û –¢–ï–ö–°–¢–ê\n\n"
                "3. –õ–ê–ô–ö–ê–ô **–í–°–ï** –¢–ï–ö–°–¢–ê –û–¢ –î–†–£–ì–ò–• –õ–Æ–î–ï–ô –° –ù–ò–ö–û–ú Crylinge\n"
                "*(–µ—Å–ª–∏ —É–≤–∏–∂—É –Ω–∞ —Å–∫—Ä–∏–Ω–µ –≥–¥–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ–º–º–µ–Ω—Ç –Ω–µ –ª–∞–π–∫–Ω—É—Ç - –ø–æ–¥–∞—Ä–∫–∞ –Ω–µ –±—É–¥–µ—Ç)*\n\n"
            ),
            parse_mode='md',
            link_preview=False
        )

    except Exception as e:
        with open(FAILED_USERS_FILE, 'a', encoding='utf-8') as f:
            f.write(f'Username: {username}, ID: {user_id}, Error: {e}\n')
        print(f"–ß—ë—Ç –ø–æ —Ö—É–π–Ω–µ –ø–æ—à–ª–æ {user_id}: {e}")

client.start()
print("By @unmentionned")
client.run_until_disconnected()